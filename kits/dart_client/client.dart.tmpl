import 'package:http/http.dart' as http;
import 'dart:convert';
import 'dart:core';

class {{camel app.name}}Client {
  final String endpointUrl;
  final bool allowInsecure;

  {{camel app.name}}Client({this.endpointUrl = "localhost:5050", this.allowInsecure = true});

{{#each app.operations as |op| }}
{{#with (lookupType app.types op.responseTypeFQN) as |returnType| }}
  // {{sentence op.description}}
  Future<{{camel returnType.name}}> {{lowerCamel op.name}}() async {
    Uri url = Uri(
      scheme: allowInsecure ? 'http' : 'https',
      host: this.endpointUrl,
      path: '{{op.hTTPSpec.path}}',
      queryParameters: null,
    );

    {{#if (eq op.hTTPSpec.method "GET")}}
    http.Response response = await http.get(url, {});
    {{else if (eq this.hTTPSpec.method "POST")}}
    Map<String,String> headers = {
      'Content-Type': 'application/json',  
    };

    http.Response response = await http.post(url, headers, body: null);
    {{/if}}
    Map jsonRes = jsonDecode(response.body);

    switch (response.statusCode) {
    {{#each op.hTTPSpec.StatusCodesFQNMapping}}
      case {{this}}:
        {{#with (lookupType app.types @key) as |typedef| }}
        {{#if this.isErrorType}}
        Map<String,dynamic> bodyJson = jsonRes['error'];
        {{else}}
        Map<String,dynamic> bodyJson = jsonRes['result'];
        {{/if}}
        {{#if this.isErrorType}}throw {{camel typedef.name}}.fromJson(bodyJson);{{else}}return {{camel typedef.name}}.fromJson(bodyJson);{{/if}}
        {{/with}}

    {{/each}}
      default:
        throw 'Unexpected status code ${response.statusCode}';
    }
  }
  {{#if @last}}{{else}}{{"\n"}}{{/if}}
{{/with}}
{{/each}}
}

{{#each app.types }}
// {{sentence this.description}}
// Type FQN: {{this.fQN}}
class {{camel this.name}} {{#if this.isErrorType}}implements Exception {{/if}}{
  {{#each this.fields}}
  {{{dartType typeName}}} {{lowerCamel name}};
  {{/each}}

  {{camel this.name}}.fromJson(Map<String, dynamic> json)
    {{#each this.fields}}
    {{#if @first}}:{{else}} {{/if}} {{lowerCamel name}} = json["{{lowerCamel name}}"]{{#if @last}};{{else}},{{/if}}
    {{/each}}

  Map<String, dynamic> toJson() => {
    {{#each this.fields}}
    "{{lowerCamel name}}": {{lowerCamel name}},
    {{/each}}
  };
}
{{#if @last}}{{else}}{{"\n"}}{{/if}}
{{/each}}