import 'package:http/http.dart' as http;
import 'dart:convert' as convert;
import 'dart:core';

class {{camel app.name}}Client {
  final String endpointUrl;
  final bool allowInsecure;

  {{camel app.name}}Client({this.endpointUrl = "http://localhost:5050", this.allowInsecure = false});

  {{#each app.operations}}
  // {{this.description}}
  Future<void> {{lowerCamel this.name}}() async {
    Uri url = Uri(
      scheme: allowInsecure ? 'http' : 'https',
      host: this.endpointUrl,
      path: '{{this.hTTPSpec.path}}',
      queryParameters: null,
    );

    {{#if (eq this.hTTPSpec.method "GET")}}
    http.Response response = await http.get(url, headers);
    {{else if (eq this.hTTPSpec.method "POST")}}
    http.Response response = await http.post(url, headers, body: null);
    {{/if}}
    switch (response.statusCode) {
    {{#each this.hTTPSpec.StatusCodesFQNMapping}}
      case {{this}}:
        {{#with (lookupType app.types @key) as |typedef| }}
        return {{camel typedef.name}}.fromJson(response.body);
        {{/with}}
        break;
      default:
        throw 'Unexpected status code ${response.statusCode}';
        break;
    {{/each}}
    }
  }
  {{#if @last}}{{else}}{{"\n"}}{{/if}}
  {{/each}}
}

{{#each app.types }}
// {{this.description}}
// Type FQN: {{this.fQN}}
class {{camel this.name}} {
  {{#each this.fields}}
  {{{dartType typeName}}} {{lowerCamel name}};
  {{/each}}

  {{camel this.name}}.fromJson(Map<String, dynamic> json)
    {{#each this.fields}}
    {{#if @first}}: {{else}} {{/if}}{{lowerCamel name}} = json["{{lowerCamel name}}"]{{#if @last}};{{else}},{{/if}}
    {{/each}}

  Map<String, dynamic> toJson() => {
    {{#each this.fields}}
    "{{lowerCamel name}}": {{lowerCamel name}},
    {{/each}}
  };
}
{{/each}}