package main

import (
	"os"
	"os/signal"
	"syscall"

	"github.com/rs/zerolog/log"
)

func main() {
	service, err := NewFromEnv()
	if err != nil {
		log.Fatal().Err(err).Msg("could not create service")
	}

	defer service.Close()

	errChan := make(chan error)
	go func() {
		errChan <- service.Start()
	}()

	sigs := make(chan os.Signal)
	signal.Notify(sigs, syscall.SIGINT, syscall.SIGTERM)

	select {
	case err := <-errChan:
		if err != nil {
			log.Fatal().Err(err).Msg("service halted")
		}

		break
	case <-sigs:
		break
	}

	log.Info().Msg("gracefully stopping service")
}
