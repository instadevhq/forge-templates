package main

import (
    "fmt"
    "log"
    "net/http"
    "database/sql"
    "errors"
    "encoding/json"
    "time"
    "runtime"
    "os"

    "github.com/lib/pq"
    chi "github.com/go-chi/chi/v5"
    "github.com/go-chi/chi/v5/middleware"
    "github.com/georgysavva/scany/v2/sqlscan"
    _ "github.com/lib/pq"
    minio "github.com/minio/minio-go"
    "github.com/google/uuid"
    "github.com/lovung/date"

    {{!-- {{#each app.types}}
    {{#each this.fields}}
    "{{goTypeImports typeName}}"
    {{/each}}
    {{/each}} --}}
)

{{#each app.types as | typedef | }}
{{> typedef}}
{{#if @last}}{{else}}{{"\n"}}{{/if}}
{{/each}}

func main() {
    // create new router
    router := chi.NewRouter()

    // router middlewares
	router.Use(middleware.RequestID)
    router.Use(middleware.RealIP)
    router.Use(middleware.Logger)
    router.Use(middleware.Recoverer)

    conn, err := sql.Open("postgres", os.Getenv("DATABASE_URL"))
    if err != nil {
    	fmt.Fprintf(os.Stderr, "Unable to connect to database: %v\n", err)
    	os.Exit(1)
    }
    defer conn.Close()

    client, err := minio.NewV4("localhost:9090", "minio", "miniominio", false)
    if err != nil {
        fmt.Fprintf(os.Stderr, "Unable to connect to s3: %v\n", err)
    	os.Exit(1)
    }

    // routes
    {{#each app.operations as |op|}}
    router.{{title (lower op.hTTPSpec.method)}}("{{op.hTTPSpec.Path}}", func(res http.ResponseWriter, req *http.Request) {
        {{> controller}}
    })
    {{/each}}

    log.Println("starting {{app.name}} app on localhost:5050")
	http.ListenAndServe("localhost:5050", router)
}